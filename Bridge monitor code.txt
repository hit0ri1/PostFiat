// Configuration

const LIFI_USDC_ADDRESSES = {
  8453: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913", // Base
  10: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607", // Optimism
  59144: "0x176211869cA2b568f2A7D4EE941E073a821EE1ff", // Linea
  80094: "0x549943e04f40284185054145c6E4e9568C1D3241", // Berachain
  5000: "0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9", // Mantle
  167000: "0x07d83526730c7438048D55A4fc0b850e2aaB6f0b", // Taiko
  2741: "0x84A71ccD554Cc1b02749b35d22F684CC8ec987e1", // Abstract
  122: "0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5", // Fuse
  1285: "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D", // Moonriver
  1868: "0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369", //Soneium
  146: "0x29219dd400f2Bf60E5a23d13Be72B486D4038894", //Sonic
  1151111081099710: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", //Solana
  534352: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4", //Scroll
};

// Orbiter-specific addresses, could differs from LiFi
const ORBITER_USDC_ADDRESSES = {
  8453: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", // Base
  10: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", // Optimism
  59144: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", // Linea
  167000: "0x07d83526730c7438048D55A4fc0b850e2aaB6f0b", // Taiko
  122: "0x28c3d1cd466ba22f6cae51b1a4692a831696391a", // Fuse
  534352: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4", //Scroll
  1151111081099710: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", //Solana
  00100: "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7", //Sui, chain ID is unconfirmed
};

const FROM_ADDRESS = "0x7075f3b9C1c9fB099D000Ebb7676B1A972c2348E";
const TO_ADDRESS = "0x7075f3b9C1c9fB099D000Ebb7676B1A972c2348E";
const SOL_FROM_ADDRESS = "355D9VZJAaiGmne58YAiepAKhAnVgUhL645tBchPEyDM";
const SOL_TO_ADDRESS = "355D9VZJAaiGmne58YAiepAKhAnVgUhL645tBchPEyDM";
const SUI_FROM_ADDRESS = "0x552e0d56a2d3cf086751a1d2d47b33a9b54f540752d0dc3a96834397b2a7a25f";
const SUI_TO_ADDRESS = "0x552e0d56a2d3cf086751a1d2d47b33a9b54f540752d0dc3a96834397b2a7a25f";

// Different bridging amounts to test (in USDC)
const BRIDGING_AMOUNTS = [770];

//chain evaluation scores, specified by me (from 0 to 100)
const CHAIN_SCORES = {
  8453: { airdrop: 80, devActivity: 70, costEfficiency: 90 }, // Base
  10: { airdrop: 70, devActivity: 85, costEfficiency: 80 }, // Optimism
  59144: { airdrop: 60, devActivity: 75, costEfficiency: 70 }, // Linea
  80094: { airdrop: 90, devActivity: 60, costEfficiency: 95 }, // Berachain
  5000: { airdrop: 65, devActivity: 65, costEfficiency: 80 }, // Mantle
  167000: { airdrop: 75, devActivity: 80, costEfficiency: 70 }, // Taiko
  2741: { airdrop: 50, devActivity: 50, costEfficiency: 60 }, // Abstract
  122: { airdrop: 55, devActivity: 45, costEfficiency: 70 }, // Fuse
  1285: { airdrop: 20, devActivity: 25, costEfficiency: 50 }, // Moonriver
  1868: { airdrop: 50, devActivity: 40, costEfficiency: 50 }, // Soneium
  146: { airdrop: 50, devActivity: 40, costEfficiency: 50 }, // Sonic
  1151111081099710: { airdrop: 70, devActivity: 90, costEfficiency: 80 }, // Solana
  534352: { airdrop: 10, devActivity: 25, costEfficiency: 50 }, // Scroll
  00100: { airdrop: 30, devActivity: 55, costEfficiency: 70 }, // Sui
};

const HEADERS = {
  "User-Agent": "Mozilla/5.0",
  "Accept": "application/json",
};

// Modify the getLiFiQuote function to accept any amount
function getLiFiQuote(fromChainId, toChainId, amount) {
  if (fromChainId == null || toChainId == null || amount == null) {
    Logger.log(`‚ùå ERROR: Undefined or null chainId or amount passed to Li.Fi`);
    return { fee: 0, time: 0, bridgeName: '', slippageUSD: 0, fromAmount: 0, toAmount: 0 };
  }

  const fromToken = LIFI_USDC_ADDRESSES[fromChainId];
  const toToken = LIFI_USDC_ADDRESSES[toChainId];
  let url = "";

  if (fromChainId == 1151111081099710)
  {
    url = `https://li.quest/v1/quote?fromChain=${fromChainId}&toChain=${toChainId}&fromToken=${fromToken}&toToken=${toToken}&fromAmount=${amount*1000000}&fromAddress=${SOL_FROM_ADDRESS}&toAddress=${TO_ADDRESS}`;
  }
  else
  {
    if (toChainId == 1151111081099710)
    {
      url = `https://li.quest/v1/quote?fromChain=${fromChainId}&toChain=${toChainId}&fromToken=${fromToken}&toToken=${toToken}&fromAmount=${amount*1000000}&fromAddress=${FROM_ADDRESS}&toAddress=${SOL_TO_ADDRESS}`;
    }
    else{
      url = `https://li.quest/v1/quote?fromChain=${fromChainId}&toChain=${toChainId}&fromToken=${fromToken}&toToken=${toToken}&fromAmount=${amount*1000000}&fromAddress=${FROM_ADDRESS}&toAddress=${TO_ADDRESS}`;
    }
  }
  
  try {
    //Logger.log(url);
    const data = fetchJsonWithRetries(url, 3, 1000); // 3 retries with 1 second delay

    if (!data.estimate) {
      Logger.log(`‚ùå No quote available for route from ${getChainName(fromChainId)} to ${getChainName(toChainId)}`);
      return { fee: 0, time: 0, bridgeName: 'Route Unavailable', slippageUSD: 0, fromAmount: 0, toAmount: 0 };
    }

    const fromAmount = parseFloat(data.estimate.fromAmount)/1000000 || 0;
    const toAmount = parseFloat(data.estimate.toAmount)/1000000 || 0;
    const slippage = fromAmount !== 0 ? (fromAmount - toAmount) / fromAmount : 0;
    const slippageUSD = slippage * fromAmount;

    const feeCosts = data.estimate.feeCosts || [];
    let totalFeeUSD = 0;
    if (feeCosts.length > 0) {
      totalFeeUSD = feeCosts.reduce((sum, fee) => sum + parseFloat(fee.amountUSD || 0), 0);
    }

    const gasCosts = data.estimate.gasCosts || [];
    let totalGasUSD = 0;
    if (gasCosts.length > 0) {
      totalGasUSD = gasCosts.reduce((sum, gas) => sum + parseFloat(gas.amountUSD || 0), 0);
    }

    const finalFeeUSD = totalFeeUSD > 0 ? totalFeeUSD + totalGasUSD : totalGasUSD;
    //Logger.log(`üìà Final Fee (USD) for amount ${amount}: ${finalFeeUSD}`);
    return {
      fee: finalFeeUSD,
      time: parseInt(data.estimate.executionDuration) || 0,
      bridgeName: data.toolDetails.name || 'Unknown',
      slippageUSD: slippageUSD,
      fromAmount: fromAmount,
      toAmount: toAmount
    };
  } catch (e) {
    Logger.log(`‚ùå Li.Fi Error: ${e}`);
    return { fee: 0, time: 0, bridgeName: 'Error', slippageUSD: 0, fromAmount: 0, toAmount: 0 };
  }
}

function getOrbiterQuote(fromChainId, toChainId, amount) {
  if (fromChainId == 1151111081099710){
      fromChainId = "SOLANA_MAIN";
  }
  if (fromChainId == 00100){
      fromChainId = "SUI_MAIN";
  }
  if (toChainId == 1151111081099710){
    toChainId = "SOLANA_MAIN";
    }
  if (toChainId == 00100){
    toChainId = "SUI_MAIN";
  }

  const url = `https://api.orbiter.finance/sdk/routers/simulation/receiveAmount?line=${fromChainId}%2F${toChainId}-USDC%2FUSDC&value=${amount*1000000}&endpoint=`

  try {
    const data = fetchJsonWithRetries(url, 3, 1000); // 3 retries with 1 second delay
    
    if (!data.result) {
      Logger.log(`‚ùå Error: No 'result' found in API response.`);
      return { fee: 0, time: 0, slippageUSD: 0, receivedAmount: 0 };
    }

    const fee = ((Number(data.result.tradeFeeAmount) + Number(data.result.withholdingFeeAmount) + Number(data.result.router.swapFee))) || 0;
    //Logger.log(`Trade fee ` + Number(data.result.tradeFeeAmount));
    //Logger.log(`Witholding fee `+ Number(data.result.withholdingFeeAmount));
    //Logger.log (`Total fee ` + fee);
    const time = data.result.router.spentTime || 0; // In seconds
    const slippageUSD = 0; //always 0 for Orbiter
    const receivedAmount = data.result.targetAmount;
    return { fee, time, slippageUSD, receivedAmount, fromChainId, toChainId};
  } 
  
  catch (e) {
    Logger.log(`‚ùå Error: ${e}`);
    return { fee: 0, time: 0, slippageUSD: 0, freceivedAmount: 0, fromChainId, toChainId };
  }
}

  // 8453: Base
  // 10: Optimism
  // 59144: Linea
  // 80094: Berachain
  // 5000: Mantle
  // 167000: Taiko
  // 2741: Abstract
  // 122: Fuse
  // 1285: Moonriver
  // 1868: Soneium
  // 146: Sonic
  // 1151111081099710: Solana
  // 534352: Scroll

function updateBridgingData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const liFIChains = [8453, 10, 59144, 2741, 534352, 80094, 1151111081099710]//, 1868, 146];
  const orbiterChains = [8453, 10, 59144, 534352, 00100, 1151111081099710];
  let ID = 0;

  // Adding headers to the spreadsheet
  sheet.clear();
  sheet.appendRow(['Route ID', 'Timestamp', 'From Chain', 'To Chain', 'Bridging Amount (USDC)', 'Fee (USD)', 'Fee (%)', 'Est. Bridge Time (s)', 'Bridge Name', 'Slippage (USD)', 'Slippage (%)', 'Received Amount (USDC)', `Total costs (USD)`, `Total costs (%)`,'Link', `Est PFT points`, `Chain Opportunity Index`,'chatGPT score', `chatGPT analyze`]);
  setColumnAlignment(sheet);
  
  // LiFi update block
  //sheet.appendRow([`LiFi routes`]);
  for (const fromChainId of liFIChains) {
    for (const toChainId of liFIChains) {
      if (fromChainId !== toChainId) {
        Logger.log(`üîÑ Jumper route: ${getChainName(fromChainId)} -> ${getChainName(toChainId)}`);
        const currentTime = new Date().toUTCString();

        const fromChainName = getChainName(fromChainId);
        const toChainName = getChainName(toChainId);

        if (fromChainName === "unknown" || toChainName === "unknown") {
          Logger.log(`‚ùå ERROR: Unknown chain detected for route from ${getChainName(fromChainId)} to ${getChainName(toChainId)}`);
          continue;
        }

        for (const amount of BRIDGING_AMOUNTS) {
          ID = ID+1;
          const liFiQuote = getLiFiQuote(fromChainId, toChainId, amount);
          const liFiFeeUSD = liFiQuote.fee;
          const liFiFeePerc = liFiFeeUSD/amount;
          const liFiTime = liFiQuote.time + 0.00000001;//adding small number for Google to recognize it as number and not date
          const liFiBridgeName = liFiQuote.bridgeName;
          const liFiSlippageUSD = liFiQuote.slippageUSD;
          const liFiSlippagePerc = liFiSlippageUSD/amount;
          const liFiReceivedAmount = liFiQuote.toAmount;
          const liFiOpportunityIndex = calculateOpportunityIndex(fromChainId);
          const totalCostsUSD = liFiFeeUSD + liFiSlippageUSD;
          const totalCostsPerc = totalCostsUSD/amount;

          sheet.appendRow([
            ID,
            currentTime,
            fromChainName,
            toChainName,
            amount,
            liFiFeeUSD,
            liFiFeePerc,
            liFiTime,
            liFiBridgeName,
            liFiSlippageUSD,
            liFiSlippagePerc,
            liFiReceivedAmount,
            totalCostsUSD,
            totalCostsPerc,
            `https://jumper.exchange/?fromAmount=${amount}&fromChain=${fromChainId}&fromToken=${LIFI_USDC_ADDRESSES[fromChainId]}&toChain=${toChainId}&toToken=${LIFI_USDC_ADDRESSES[toChainId]}`,
            80,
            liFiOpportunityIndex,
          ]);

          Logger.log(`‚úÖ Data written for route: ${fromChainName} -> ${toChainName} with amount: ${amount}`);
        }
      }
    }
  }

  //Orbiter update block
  //sheet.appendRow([`Orbiter routes`]);
  for (const fromChainId of orbiterChains) {
      for (const toChainId of orbiterChains) {
      if (fromChainId !== toChainId) {
        Logger.log(`üîÑ Orbiter route: ${getChainName(fromChainId)} -> ${getChainName(toChainId)}`);
        const currentTime = new Date().toUTCString();
        const fromChainName = getChainName(fromChainId);
        const toChainName = getChainName(toChainId);
        if (fromChainName === "unknown" || toChainName === "unknown") {
          Logger.log(`‚ùå ERROR: Unknown chain detected for route from ${getChainName(fromChainId)} to ${getChainName(toChainId)}`);
          continue;
        }
        for (const amount of BRIDGING_AMOUNTS) {
          ID = ID+1;
          const orbiterQuote = getOrbiterQuote(fromChainId, toChainId, amount);
          const orbiterFeeUSD = orbiterQuote.fee;
          const orbiterFeePerc = orbiterFeeUSD/amount;
          const orbiterTime = orbiterQuote.time;
          const orbiterSlippageUSD = orbiterQuote.slippageUSD;
          const orbiterSlippagePerc = orbiterSlippageUSD/amount;
          const orbiterRecievedAmount = orbiterQuote.receivedAmount;
          const orbiterOpportunityIndex = calculateOpportunityIndex(fromChainId);
          const orbiterTotalCostsUSD = orbiterFeeUSD + orbiterSlippageUSD;
          const orbiterTotalCostsPerc = orbiterTotalCostsUSD/amount;
          let fromChainIDCorrected = "";
          let toChainIDCorrected = "";

          if (fromChainId == 1151111081099710){
            fromChainIDCorrected = "SOLANA_MAIN";
          }
          else {
            if (fromChainId == 00100){
              fromChainIDCorrected = "SUI_MAIN";
            }
            else{
              fromChainIDCorrected = fromChainId;
            }
          }
          
          if (toChainId == 1151111081099710){
            toChainIDCorrected = "SOLANA_MAIN";
          }
          else {
            if (toChainId == 00100){
              toChainIDCorrected = "SUI_MAIN";
            }
            else{
              toChainIDCorrected = toChainId;
            }
          }

          sheet.appendRow([
            ID,
            currentTime,
            fromChainName,
            toChainName,
            amount,
            orbiterFeeUSD,
            orbiterFeePerc,
            orbiterTime,
            `Orbiter`,
            orbiterSlippageUSD,
            orbiterSlippagePerc,
            orbiterRecievedAmount,
            orbiterTotalCostsUSD,
            orbiterTotalCostsPerc,
            `https://orbiter.finance/en?src_chain=${fromChainIDCorrected}&tgt_chain=${toChainIDCorrected}&src_token=USDC`,
            80,
            orbiterOpportunityIndex,
          ]);

          Logger.log(`‚úÖ Data written for route: ${fromChainName} -> ${toChainName} with amount: ${amount}`);
        }
      }
    }
  }

  analyzeWithOpenAI(sheet);
  setColumnAlignment(sheet);
  sortByColumn(sheet,14);
  
  Logger.log("‚úÖ Bridging data update completed.");
}


// Helper function to map chain IDs to names
function getChainName(chainId) {
  const map = {
    8453: "Base",
    10: "Optimism",
    59144: "Linea",
    80094: "Berachain",
    5000: "Mantle",
    167000: "Taiko",
    2741: "Abstract",
    122: "Fuse",
    1285: "Moonriver",
    1868: "Soneium",
    146: "Sonic",
    534352: "Scroll",
    1151111081099710: "Solana",
    00100: "Sui",
  };

  if (!chainId) {
    Logger.log(`‚ùå ERROR: Invalid chainId (${chainId}) received in getChainName()`);
    return "unknown";
  }

  if (map[chainId]) {
    return map[chainId];
  } else {
    Logger.log(`‚ùå ERROR: No name found for chainId=${chainId}`);
    return "unknown";
  }
}

// After appending the rows to the sheet, set the alignment
function setColumnAlignment(sheet) {
  const range = sheet.getDataRange(); // Get the range of all data
  const numColumns = range.getNumColumns(); // Get the number of columns
  const numRows = sheet.getLastRow();

  // Format header row (row 1)
  const headerRange = sheet.getRange(1, 1, 1, numColumns);
  headerRange.setHorizontalAlignment("center");
  headerRange.setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
  headerRange.setFontWeight("bold");

  // Freeze the first row
  sheet.setFrozenRows(1);

  for (let col = 1; col <= numColumns; col++) {
    const columnRange = sheet.getRange(1, col, numRows, 1);

    // Align columns
    if (col === 15 || col === 19) {
      columnRange.setHorizontalAlignment("left");
    } else {
      columnRange.setHorizontalAlignment("center");
    }

    // Word wrap for column 19
    if (col === 19) {
      columnRange.setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
    }

    // Set number formats
    if ([6, 12, 13].includes(col)) {
      columnRange.setNumberFormat("0.0000"); // Number with 4 decimal places
    }
    if (col === 8) {
      columnRange.setNumberFormat("0"); // Number with no decimals
    }
    if ([7, 11].includes(col)) {
      columnRange.setNumberFormat("0.00%"); // Percent with 2 decimal places
    }
    if (col === 14) {
      columnRange.setNumberFormat("0.000%"); // Percent with 4 decimal places
    }
  }
}

// Sort all rows by values in column
function sortByColumn(sheet, number)
{
  const numRows = sheet.getLastRow();
  sheet.getRange(2, 1, numRows - 1, 19).sort({ column: number, ascending: true });
}

function calculateOpportunityIndex(chainId) {
  const scores = CHAIN_SCORES[chainId];
  if (!scores) return 0;
  return scores.airdrop + scores.devActivity + scores.costEfficiency;
}

function fetchJsonWithRetries(url, maxRetries, delayMs) {
  //Logger.log("Starting to retry fetch on URL " + url);
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = UrlFetchApp.fetch(url, { muteHttpExceptions: true });
      const code = response.getResponseCode();
      
      // If not 200, log and retry
      if (code !== 200) {
        throw new Error(`HTTP ${code} on attempt ${attempt}`);
      }
      
      const json = JSON.parse(response.getContentText());
      
      // Check if it's a "No quote" style response
      if (json.message && json.message.toLowerCase().includes("no quote")) {
        throw new Error(`LiFi API says: ${json.message}`);
      }
      
      return json; // ‚úÖ Successful fetch
    } catch (err) {
      Logger.log(`Attempt ${attempt}: ${err.message}`);
      if (attempt === maxRetries) {
        throw new Error(`Failed after ${maxRetries} attempts: ${err.message}`);
      }
      Utilities.sleep(delayMs); // Wait before retrying
    }
  }
}

// Send to chatGPT each row of a bridge data (it is slow and done for every row)
// function analyzeWithOpenAI(data) {
//   //const prompt = `Analyze the following bridging data for potential opportunities: ${JSON.stringify(data)}`;
//   const prompt = `You're an expert AI advisor that helps me to choose the best crypto bridge routes. Give a concise, user-friendly summary (under 2 sentences) of that bridge route:  ${JSON.stringify(data)}. Focus on the benefits or downsides for the user, such as speed, cost-efficiency, reliability, rumors of the future airdrops. Mark three that on your opinion are the best from the whole world data you have. At the start give your numerical evaluation from 0 to 100, where 0 is the worst bridge ever and 100 - higly recommended`;

//   const requestBody = {
//     model: "gpt-4-turbo",
//     messages: [
//       {
//         role: "user",
//         content: prompt
//       }
//     ],
//     max_tokens: 1000,
//     temperature: 0.7
//   };

//   const response = UrlFetchApp.fetch('https://api.openai.com/v1/chat/completions', {
//     method: 'post',
//     headers: {
//       'Authorization': `Bearer ${OPENAI_API_KEY}`,
//       'Content-Type': 'application/json'
//     },
//     payload: JSON.stringify(requestBody),
//     muteHttpExceptions: true
//   });
  
//   const result = JSON.parse(response.getContentText());
  
//   if (result.error) {
//     Logger.log('‚ùå OpenAI API Error: ' + JSON.stringify(result.error));
//     return `Error: ${result.error.message}`;
//   }

//   return result.choices[0].message.content.trim();
// }


async function analyzeWithOpenAI(sheet) {
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1).filter(row => row.join('').trim() !== '');

  // Build a markdown-style table
  let markdown = `Here's a table of bridging quotes:\n\n`;
  markdown += `| ${headers.join(' | ')} |\n`;
  markdown += `| ${headers.map(() => '---').join(' | ')} |\n`;

  rows.forEach(row => {
    const sanitizedRow = row.map(cell => String(cell).replace(/\|/g, '\\|')); // Escape |
    markdown += `| ${sanitizedRow.join(' | ')} |\n`;
  });

  const prompt = `
    ${markdown}
    You're an expert AI advisor that has the whole world's crypto market data in your hands. You help choose the best crypto bridge routes available for given pairs.
    You are analyzing bridging routes from the following table. 
    Based on the data you have, choose the top 3 best routes. Prioritize routes with lowest total cost (sum of Fee USD and Slippage USD) and evaluation of benefits of using these chains in terms of rumored future airdrops (if there are rumors about it ‚Äî don't make it up. Make fact checking before decide).
    Output the result as a JSON array of 3 objects, each with:
    - "routeID": (the Route ID number from the table),
    - "routeEstimationValue": (a number between 0 and 100 estimating its overall value, usability, benefits of using this chain because of rumors of future airdrops),
    - "routeSummary": (a brief user-friendly summary (under 4 sentences) ‚Äî of why this route is good).
    Only return the JSON array. Do not include any other text.
    `;

  const response = UrlFetchApp.fetch("https://api.openai.com/v1/chat/completions", {
  method: "post",
  contentType: "application/json",
  headers: {
    Authorization: `Bearer ${OPENAI_API_KEY}`
  },
  payload: JSON.stringify({
    model: "gpt-4-turbo",
    messages: [
      { role: "system", content: "You are an expert at analyzing crypto bridge routes." },
      { role: "user", content: prompt }
    ],
    temperature: 0.2
  })
  });

  //Logger.log("OpenAI HTTP Response Code: " + response.getResponseCode());
  const responseText = response.getContentText();
  //Logger.log("OpenAI Raw Text Response: " + responseText);

  let analysis;
  try {
    const parsed = JSON.parse(responseText);
    const content = parsed.choices[0].message.content;
    //Logger.log("Raw content from ChatGPT:\n" + content);
    analysis = JSON.parse(content); // This is the actual array of routes
  } catch (e) {
    Logger.log("Failed to parse response JSON or content: " + e);
    return;
  }

  // Now extract IDs, scores, and summaries
  const IDs = analysis.map(route => route.routeID);
  const scores = analysis.map(route => route.routeEstimationValue);
  const summaries = analysis.map(route => route.routeSummary);

  highlightTopRoutes(sheet, IDs);
  writeChatGPTScores(sheet, IDs, scores);
  writeChatGPTSummaries(sheet, IDs, summaries);
}

function highlightTopRoutes(sheet, IDs) {
  Logger.log("Highlighting function starts");

  const data = sheet.getDataRange().getValues();
  const idIndex = data[0].indexOf("Route ID");

  if (idIndex === -1) {
    Logger.log("Could not find 'Route ID' column.");
    return;
  }

  for (let i = 1; i < data.length; i++) {
    const routeID = String(data[i][idIndex]).trim();
    const match = IDs.map(String).map(id => id.trim()).includes(routeID);
    
    if (match) {
      const range = sheet.getRange(i + 1, 1, 1, sheet.getLastColumn());
      range.setBackground("#e3f2fd");
    }
  }
  Logger.log("Highlighting function ends");
}

function writeChatGPTScores(sheet, IDs, scores) {
  Logger.log("writeChatGPTScores function starts");
  const data = sheet.getDataRange().getValues();
  const idIndex = data[0].indexOf("Route ID");

  if (idIndex === -1) {
    Logger.log("Could not find 'Route ID' column.");
    return;
  }

  for (let i = 1; i < data.length; i++) {
    const routeID = String(data[i][idIndex]).trim(); // Convert to string and remove extra spaces
    const matchIndex = IDs.map(String).map(id => id.trim()).indexOf(routeID);
    
    if (matchIndex !== -1) {
      sheet.getRange(i + 1, 18).setValue(scores[matchIndex]);
    }

  }
  Logger.log("writeChatGPTScores function ends");
}


function writeChatGPTSummaries(sheet, IDs, summaries) {
  Logger.log("writeChatGPTSummaries function starts");
  const data = sheet.getDataRange().getValues();
  const idIndex = data[0].indexOf("Route ID");

  for (let i = 1; i < data.length; i++) {
    const routeID = data[i][idIndex];
    const matchIndex = IDs.indexOf(routeID);
    if (matchIndex !== -1) {
      sheet.getRange(i + 1, 19).setValue(summaries[matchIndex]);
    }
  }
  Logger.log("writeChatGPTSummaries function ends");
}