// Configuration


const LIFI_USDC_ADDRESSES = {
  8453: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913", // Base
  10: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607", // Optimism
  59144: "0x176211869cA2b568f2A7D4EE941E073a821EE1ff", // Linea
  80094: "0x549943e04f40284185054145c6E4e9568C1D3241", // Berachain
  5000: "0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9", // Mantle
  167000: "0x07d83526730c7438048D55A4fc0b850e2aaB6f0b", // Taiko
  2741: "0x84A71ccD554Cc1b02749b35d22F684CC8ec987e1", // Abstract
  122: "0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5", // Fuse
  1285: "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D", // Moonriver
  1868: "0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369", //Soneium
  146: "0x29219dd400f2Bf60E5a23d13Be72B486D4038894", //Sonic
  1151111081099710: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", //Solana
  534352: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4", //Scroll
};

// Orbiter-specific addresses, could differs from LiFi
const ORBITER_USDC_ADDRESSES = {
  8453: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", // Base
  10: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", // Optimism
  59144: "0xd9aAEc86B65D86f6A7B5B1b0c42FFA531710b6CA", // Linea
  167000: "0x07d83526730c7438048D55A4fc0b850e2aaB6f0b", // Taiko
  122: "0x28c3d1cd466ba22f6cae51b1a4692a831696391a", // Fuse
  534352: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4", //Scroll
  1151111081099710: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", //Solana
  00100: "0xdba34672e30cb065b1f93e3ab55318768fd6fef66c15942c9f7cb846e2f900e7", //Sui, chain ID is unconfirmed
};

const RELAY_USDC_ADDRESSES = {
  8453: "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913", // Base
  10: "0x7F5c764cBc14f9669B88837ca1490cCa17c31607", // Optimism
  59144: "0x176211869cA2b568f2A7D4EE941E073a821EE1ff", // Linea
  80094: "0x549943e04f40284185054145c6E4e9568C1D3241", // Berachain
  5000: "0x09Bc4E0D864854c6aFB6eB9A9cdF58aC190D0dF9", // Mantle
  167000: "0x07d83526730c7438048D55A4fc0b850e2aaB6f0b", // Taiko
  2741: "0x84A71ccD554Cc1b02749b35d22F684CC8ec987e1", // Abstract
  122: "0x620fd5fa44BE6af63715Ef4E65DDFA0387aD13F5", // Fuse
  1285: "0xE3F5a90F9cb311505cd691a46596599aA1A0AD7D", // Moonriver
  1868: "0xbA9986D2381edf1DA03B0B9c1f8b00dc4AacC369", //Soneium
  146: "0x29219dd400f2Bf60E5a23d13Be72B486D4038894", //Sonic
  792703809: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v", //Solana
  534352: "0x06eFdBFf2a14a7c8E15944D1F4A48F9F95F663A4", //Scroll
};

//From and To wallets
const EVM_ADDRESS = "0x7075f3b9C1c9fB099D000Ebb7676B1A972c2348E";
const SOL_ADDRESS = "355D9VZJAaiGmne58YAiepAKhAnVgUhL645tBchPEyDM";
const SUI_ADDRESS = "0x552e0d56a2d3cf086751a1d2d47b33a9b54f540752d0dc3a96834397b2a7a25f";

// Different bridging amounts to test (in USDC)
const BRIDGING_AMOUNTS = [770];

//chain evaluation scores, specified by me (from 0 to 100)
const CHAIN_SCORES = {
  8453: { airdrop: 80, devActivity: 70, costEfficiency: 90 }, // Base
  10: { airdrop: 70, devActivity: 85, costEfficiency: 80 }, // Optimism
  59144: { airdrop: 60, devActivity: 75, costEfficiency: 70 }, // Linea
  80094: { airdrop: 90, devActivity: 60, costEfficiency: 95 }, // Berachain
  5000: { airdrop: 65, devActivity: 65, costEfficiency: 80 }, // Mantle
  167000: { airdrop: 75, devActivity: 80, costEfficiency: 70 }, // Taiko
  2741: { airdrop: 50, devActivity: 50, costEfficiency: 60 }, // Abstract
  122: { airdrop: 55, devActivity: 45, costEfficiency: 70 }, // Fuse
  1285: { airdrop: 20, devActivity: 25, costEfficiency: 50 }, // Moonriver
  1868: { airdrop: 50, devActivity: 40, costEfficiency: 50 }, // Soneium
  146: { airdrop: 50, devActivity: 40, costEfficiency: 50 }, // Sonic
  792703809: { airdrop: 70, devActivity: 90, costEfficiency: 80 }, // Solana
  534352: { airdrop: 10, devActivity: 25, costEfficiency: 50 }, // Scroll
  00100: { airdrop: 30, devActivity: 55, costEfficiency: 70 }, // Sui
};

//-------------LIFI parsing---------------------
function parseLIFIQuote(data) {
  const fromAmount = parseFloat(data.estimate.fromAmount)/1000000 || 0;
  const toAmount = parseFloat(data.estimate.toAmount)/1000000 || 0;
  const slippage = fromAmount !== 0 ? (fromAmount - toAmount) / fromAmount : 0;
  const slippageUSD = slippage * fromAmount;

  // Consolidate fee and gas calculation
  const feeUSD = data.estimate.feeCosts || [];
  const gasUSD = data.estimate.gasCosts || [];

  if (feeUSD.length > 0) {
      totalFeeUSD = feeUSD.reduce((sum, fee) => sum + parseFloat(fee.amountUSD || 0), 0);
    }
  const totalGasUSD = gasUSD.reduce((sum, gas) => sum + parseFloat(gas.amountUSD || 0), 0);
  
  return {
    fee: totalFeeUSD,
    gas: totalGasUSD,
    time: parseInt(data.estimate.executionDuration) || 0,
    bridgeName: data.toolDetails.name || 'Unknown',
    slippageUSD: slippageUSD,
    toAmount: toAmount
  };
}

//-------------LIFI processing--------------------
function processLIFIRoutes(sheet, liFIChains, ID) {
  const rowsToAppend = [];
  const requests = [];
  const requestMetadata = [];

  // Prepare requests
  for (const fromChainId of liFIChains) {
    const fromChainName = getChainName(fromChainId);
    if (fromChainName === "unknown") continue;

    for (const toChainId of liFIChains) {
      if (fromChainId === toChainId) continue;
      const toChainName = getChainName(toChainId);
      if (toChainName === "unknown") continue;

      for (const amount of BRIDGING_AMOUNTS) {
        const fromAddress = (fromChainName === "solana") ? SOL_ADDRESS : EVM_ADDRESS;
        const toAddress = (toChainName === "solana") ? SOL_ADDRESS : EVM_ADDRESS;

        const queryString = `?fromChain=${fromChainId}&toChain=${toChainId}&fromToken=${LIFI_USDC_ADDRESSES[fromChainId]}&toToken=${LIFI_USDC_ADDRESSES[toChainId]}&fromAmount=${amount * 1000000}&fromAddress=${fromAddress}&toAddress=${toAddress}`;

        requests.push({
          url: "https://li.quest/v1/quote" + queryString,
          method: "get",
          muteHttpExceptions: true,
        });

        requestMetadata.push({
          fromChainId,
          toChainId,
          fromChainName,
          toChainName,
          amount,
        });
      }
    }
  }

  let responses = UrlFetchApp.fetchAll(requests);
  let retries = 0;
  const maxRetries = 4;

  while (retries <= maxRetries) {
    const failedRequests = [];
    const failedMetadata = [];

    for (let i = 0; i < responses.length; i++) {
      const res = responses[i];
      const meta = requestMetadata[i];
      ID++;

      try {
        Logger.log(`🔄 Jumper route: ${getChainName(meta.fromChainId)} -> ${getChainName(meta.toChainId)}`)

        const content = res.getContentText();
        const data = JSON.parse(content);
        const quote = parseLIFIQuote(data);
        const feeUSD = quote.fee;
        const gasUSD = quote.gas;
        const slippageUSD = quote.slippageUSD;
        const totalCostsUSD = feeUSD + gasUSD + slippageUSD;

        rowsToAppend.push([
          ID,
          new Date().toUTCString(),
          meta.fromChainName,
          meta.toChainName,
          meta.amount,
          feeUSD,
          feeUSD / meta.amount,
          quote.time + 1e-8,
          quote.bridgeName,
          slippageUSD,
          slippageUSD / meta.amount,
          quote.toAmount,
          totalCostsUSD,
          totalCostsUSD / meta.amount,
          `https://jumper.exchange/?fromAmount=${meta.amount}&fromChain=${meta.fromChainId}&fromToken=${LIFI_USDC_ADDRESSES[meta.fromChainId]}&toChain=${meta.toChainId}&toToken=${LIFI_USDC_ADDRESSES[meta.toChainId]}`,
          80,
          calculateOpportunityIndex(meta.fromChainId),
        ]);
      } catch (error) {
        // Only retry if retries left
        if (retries < maxRetries) {
          Logger.log(`🔁 Retrying failed request: ${meta.fromChainName} -> ${meta.toChainName}, amount: ${meta.amount}`);
          Logger.log(error.toString());
          failedRequests.push(requests[i]);
          failedMetadata.push(meta);
        } else {
          Logger.log(`❌ Final fail: ${meta.fromChainName} -> ${meta.toChainName}, amount: ${meta.amount}`);
          Logger.log(error.toString());
        }
      }
      Logger.log(`✅ Data written for route: ${meta.fromChainName} -> ${meta.toChainName} with amount: ${meta.amount}`);
    }

    if (failedRequests.length === 0) break;

    Logger.log(`🔄 Retry attempt ${retries + 1} with ${failedRequests.length} failed routes.`);
    responses = UrlFetchApp.fetchAll(failedRequests);
    requests.length = 0;
    requestMetadata.length = 0;

    // Retry only failed
    for (let j = 0; j < failedRequests.length; j++) {
      requests.push(failedRequests[j]);
      requestMetadata.push(failedMetadata[j]);
    }

    retries++;
  }

  if (rowsToAppend.length > 0) {
    const startRow = sheet.getLastRow() + 1;
    sheet.getRange(startRow, 1, rowsToAppend.length, rowsToAppend[0].length).setValues(rowsToAppend);
  }
  return ID;
}


//--------------ORBITER parsing------------------------
function parseORBITERQuote(data) {
  const fee = ((Number(data.result.tradeFeeAmount) + Number(data.result.withholdingFeeAmount) + Number(data.result.router.swapFee))) || 0;
  const time = data.result.router.spentTime || 0; // In seconds
  const slippageUSD = 0; //always 0 for Orbiter
  const toAmount = data.result.targetAmount;
  return { fee, time, slippageUSD, toAmount};
}

//-------------ORBITER processing----------------------
function processORBITERRoutes(sheet, orbiterChains, ID) {
  const rowsToAppend = [];
  const requests = [];
  const requestMetadata = [];

  // Prepare requests
  for (const fromChainId of orbiterChains) {
  const fromChainName = getChainName(fromChainId);
  if (fromChainName === "unknown") continue;

    for (const toChainId of orbiterChains) {
    if (fromChainId === toChainId) continue;
    const toChainName = getChainName(toChainId);
    if (toChainName === "unknown") continue;

      for (const amount of BRIDGING_AMOUNTS) {
        let fromChainIdCorrected = fromChainId;
        let toChainIdCorrected = toChainId;

        if (fromChainId === 1151111081099710) {
          fromChainIdCorrected = "SOLANA_MAIN";
        } else if (fromChainId === 00100) {
          fromChainIdCorrected = "SUI_MAIN";
        }

        if (toChainId === 1151111081099710) {
          toChainIdCorrected = "SOLANA_MAIN";
        } else if (toChainId === 00100) {
          toChainIdCorrected = "SUI_MAIN";
        }

        const queryString = `${fromChainIdCorrected}%2F${toChainIdCorrected}-USDC%2FUSDC&value=${amount*1000000}&endpoint=`;

        requests.push({
          url: "https://api.orbiter.finance/sdk/routers/simulation/receiveAmount?line=" + queryString,
          method: "get",
          muteHttpExceptions: true,
        });

        requestMetadata.push({
          fromChainIdCorrected,
          toChainIdCorrected,
          fromChainName,
          toChainName,
          amount,
        });
      }
    }
  }

  let responses = UrlFetchApp.fetchAll(requests);
  let retries = 0;
  const maxRetries = 4;

  while (retries <= maxRetries) {
    const failedRequests = [];
    const failedMetadata = [];

    for (let i = 0; i < responses.length; i++) {
      const res = responses[i];
      const meta = requestMetadata[i];
      ID++;

      try {
        Logger.log(`🔄 Orbiter route: ${getChainName(meta.fromChainIdCorrected)} -> ${getChainName(meta.toChainIdCorrected)}`)
        
        const content = res.getContentText();
        const data = JSON.parse(content);
        const quote = parseORBITERQuote(data);
        const feeUSD = quote.fee;
        const slippageUSD = quote.slippageUSD;
        const totalCostsUSD = feeUSD + slippageUSD;

        rowsToAppend.push([
          ID,
          new Date().toUTCString(),
          meta.fromChainName,
          meta.toChainName,
          meta.amount,
          feeUSD,
          feeUSD / meta.amount,
          quote.time + 1e-8,
          "Orbiter",
          slippageUSD,
          slippageUSD / meta.amount,
          quote.toAmount,
          totalCostsUSD,
          totalCostsUSD / meta.amount,
          `https://orbiter.finance/en?src_chain=${meta.fromChainIdCorrected}&tgt_chain=${meta.toChainIdCorrected}&src_token=USDC`,
          80,
          calculateOpportunityIndex(meta.fromChainId),
        ]);
      } catch (error) {
        // Only retry if retries left
        if (retries < maxRetries) {
          Logger.log(`🔁 Retrying failed request: ${meta.fromChainName} -> ${meta.toChainName}, amount: ${meta.amount}`);
          Logger.log(error.toString());
          failedRequests.push(requests[i]);
          failedMetadata.push(meta);
        } else {
          Logger.log(`❌ Final fail: ${meta.fromChainName} -> ${meta.toChainName}, amount: ${meta.amount}`);
          //Logger.log("URL " + requests.url);
          Logger.log(error.toString());
        }
      }

      Logger.log(`✅ Data written for route: ${meta.fromChainName} -> ${meta.toChainName} with amount: ${meta.amount}`);
    }

    if (failedRequests.length === 0) break;

    Logger.log(`🔄 Retry attempt ${retries + 1} with ${failedRequests.length} failed routes.`);
    responses = UrlFetchApp.fetchAll(failedRequests);
    requests.length = 0;
    requestMetadata.length = 0;

    // Retry only failed
    for (let j = 0; j < failedRequests.length; j++) {
      requests.push(failedRequests[j]);
      requestMetadata.push(failedMetadata[j]);
    }

    retries++;
  }

  if (rowsToAppend.length > 0) {
    const startRow = sheet.getLastRow() + 1;
    sheet.getRange(startRow, 1, rowsToAppend.length, rowsToAppend[0].length).setValues(rowsToAppend);
  }
  return ID;
}


//--------------RELAY parsing--------------------------
function parseRELAYQuote(data) {
  // Extract fees
  const fee = data.fees;
  const feeDetails = {
    relayer: fee.relayer.amountUsd,
    app: fee.app.amountUsd,
    relayerGas: fee.relayerGas.amountUsd,
    gas: fee.gas.amountUsd,
    relayerService: fee.relayerService.amountUsd
  };
  const totalFees = 
  parseFloat(feeDetails.relayer) +
  parseFloat(feeDetails.app) +
  parseFloat(feeDetails.relayerGas) +
  parseFloat(feeDetails.gas) +
  parseFloat(feeDetails.relayerService);

  // Extract amount to receive
  const toAmount = data.details.currencyOut.amountFormatted;
  // Extract bridge time
  const bridgeTime = data.details.timeEstimate;
  
  return { totalFees, bridgeTime, toAmount};
}


//--------------RELAY processing------------------------
function processRELAYRoutes(sheet, relayChains, ID) {
  const rowsToAppend = [];
  const requests = [];
  const requestMetadata = [];

  // Prepare requests
  for (const fromChainId of relayChains) {
  const fromChainName = getChainName(fromChainId);
  if (fromChainName === "unknown") continue;

    for (const toChainId of relayChains) {
    if (fromChainId === toChainId) continue;
    const toChainName = getChainName(toChainId);
    if (toChainName === "unknown") continue;

      for (const fromAmount of BRIDGING_AMOUNTS) {
        const fromToken = RELAY_USDC_ADDRESSES[fromChainId];
        const toToken = RELAY_USDC_ADDRESSES[toChainId];
        const url = "https://api.relay.link/quote";
        let fromAddress = "";
        let toAddress = "";

        if (fromChainId == 792703809)
        {
          fromAddress = SOL_ADDRESS;
          toAddress = EVM_ADDRESS;
        }
        else
        {
          if (toChainId == 792703809)
          {
            fromAddress = EVM_ADDRESS;
            toAddress = SOL_ADDRESS;
          }
          else{
            fromAddress = EVM_ADDRESS;
            toAddress = EVM_ADDRESS;
          }
        }

        const payload = {
          useReceiver: true,
          user: fromAddress,
          originChainId: fromChainId,
          destinationChainId: toChainId,
          originCurrency: fromToken,
          destinationCurrency: toToken,
          amount: fromAmount * 1000000,
          tradeType: "EXACT_INPUT",
          recipient: toAddress
        };

        requests.push({
          url: url,
          method: 'post',
          contentType: 'application/json',
          payload: JSON.stringify(payload),
          muteHttpExceptions: true // optional: useful for debugging errors
        });

        requestMetadata.push({
          fromChainId,
          toChainId,
          fromAddress,
          toAddress,
          fromChainName,
          toChainName,
          fromAmount,
          url,
        });
      }
    }
  }

  let responses = UrlFetchApp.fetchAll(requests);

  let retries = 0;
  const maxRetries = 4;

  while (retries <= maxRetries) {
    const failedRequests = [];
    const failedMetadata = [];

    for (let i = 0; i < responses.length; i++) {
      const res = responses[i];
      const meta = requestMetadata[i];
      ID++;

      try {
        Logger.log(`🔄 Relay route: ${meta.fromChainName} -> ${meta.toChainName}`)
        
        const content = res.getContentText();
        const data = JSON.parse(content);
        const quote = parseRELAYQuote(data);
        const relayFeeUSD = quote.totalFees;
        const relayFeePerc = relayFeeUSD/meta.fromAmount;
        const relaBridgeTime = quote.bridgeTime;
        const relaySlippageUSD = meta.fromAmount - quote.toAmount;
        const relaySlippagePerc = relaySlippageUSD/meta.fromAmount;
        const relayRecievedAmount = quote.toAmount;
        const relayOpportunityIndex = calculateOpportunityIndex(meta.fromChainId);
        const relayTotalCostsUSD = relayFeeUSD + relaySlippageUSD;
        const relayTotalCostsPerc = relayTotalCostsUSD/meta.fromAmount;

        rowsToAppend.push([
          ID,
          new Date().toUTCString(),
          meta.fromChainName,
          meta.toChainName,
          meta.fromAmount,
          relayFeeUSD,
          relayFeePerc,
          relaBridgeTime + 1e-8,
          "Relay",
          relaySlippageUSD,
          relaySlippagePerc,
          relayRecievedAmount,
          relayTotalCostsUSD,
          relayTotalCostsPerc,
          `https://www.relay.link/bridge/${meta.toChainName}?fromChainId=${meta.fromChainId}&fromCurrency=${RELAY_USDC_ADDRESSES[meta.fromChainId]}&amount=${meta.fromAmount}&toCurrency=${RELAY_USDC_ADDRESSES[meta.toChainId]}`,
          80,
          relayOpportunityIndex,
        ]);
      } catch (error) {
        // Only retry if retries left
        if (retries < maxRetries) {
          Logger.log(`🔁 Retrying failed request: ${meta.fromChainName} -> ${meta.toChainName}, amount: ${meta.fromAmount}`);
          Logger.log(error.toString());
          failedRequests.push(requests[i]);
          failedMetadata.push(meta);
        } else {
          Logger.log(`❌ Final fail: ${meta.fromChainName} -> ${meta.toChainName}, amount: ${meta.fromAmount}`);
          //Logger.log("URL " + requests.url);
          Logger.log(error.toString());
        }
      }

      Logger.log(`✅ Data written for route: ${meta.fromChainName} -> ${meta.toChainName} with amount: ${meta.fromAmount}`);
    }

    if (failedRequests.length === 0) break;

    Logger.log(`🔄 Retry attempt ${retries + 1} with ${failedRequests.length} failed routes.`);
    responses = UrlFetchApp.fetchAll(failedRequests);
    requests.length = 0;
    requestMetadata.length = 0;

    // Retry only failed
    for (let j = 0; j < failedRequests.length; j++) {
      requests.push(failedRequests[j]);
      requestMetadata.push(failedMetadata[j]);
    }

    retries++;
  }

  if (rowsToAppend.length > 0) {
    const startRow = sheet.getLastRow() + 1;
    sheet.getRange(startRow, 1, rowsToAppend.length, rowsToAppend[0].length).setValues(rowsToAppend);
  }
  return ID;
}


function updateBridgingData() {
  const sheet = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  const liFIChains = [8453, 10, 59144, 2741, 534352, 80094, 1151111081099710, 1868, 146];
  const orbiterChains = [8453, 10, 59144, 534352, 00100, 1151111081099710];
  const relayChains = [8453, 10, 59144, 2741, 534352, 80094, 792703809]//, 1868, 146];
  let ID = 0;

  // Adding headers to the spreadsheet
  sheet.clear();
  sheet.appendRow(['Route ID', 'Timestamp', 'From Chain', 'To Chain', 'Bridging Amount (USDC)', 'Fee (USD)', 'Fee (%)', 'Est. Bridge Time (s)', 'Bridge Name', 'Slippage (USD)', 'Slippage (%)', 'Received Amount (USDC)', `Total costs (USD)`, `Total costs (%)`,'Link', `Est PFT points`, `Chain Opportunity Index`,'chatGPT score', `chatGPT analyze`]);
  setColumnAlignment(sheet);
  ID = processLIFIRoutes(sheet, liFIChains, ID);
  ID = processORBITERRoutes(sheet, orbiterChains, ID);
  ID = processRELAYRoutes (sheet, relayChains, ID);

  //analyzeWithOpenAI(sheet); // add cahtGPT analyzis
  setColumnAlignment(sheet);
  //sortByColumn(sheet,14);
  
  Logger.log("✅ Bridging data update completed.");
}


// Helper function to map chain IDs to names
function getChainName(chainId) {
  const map = {
    8453: "base",
    10: "optimism",
    59144: "linea",
    80094: "berachain",
    5000: "mantle",
    167000: "taiko",
    2741: "abstract",
    122: "fuse",
    1285: "moonriver",
    1868: "soneium",
    146: "sonic",
    534352: "scroll",
    1151111081099710: "solana",
    792703809: "solana", // for Relay aggregator
    00100: "sui",
    SOLANA_MAIN: "solana",
    SUI_MAIN: "sui",
  };

  if (!chainId) {
    Logger.log(`❌ ERROR: Invalid chainId (${chainId}) received in getChainName()`);
    return "unknown";
  }

  if (map[chainId]) {
    return map[chainId];
  } else {
    Logger.log(`❌ ERROR: No name found for chainId=${chainId}`);
    return "unknown";
  }
}

// After appending the rows to the sheet, set the alignment
function setColumnAlignment(sheet) {
  const range = sheet.getDataRange(); // Get the range of all data
  const numColumns = range.getNumColumns(); // Get the number of columns
  const numRows = sheet.getLastRow();

  // Format header row (row 1)
  const headerRange = sheet.getRange(1, 1, 1, numColumns);
  headerRange.setHorizontalAlignment("center");
  headerRange.setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
  headerRange.setFontWeight("bold");

  // Freeze the first row
  sheet.setFrozenRows(1);

  for (let col = 1; col <= numColumns; col++) {
    const columnRange = sheet.getRange(1, col, numRows, 1);

    // Align columns
    if (col === 15 || col === 19) {
      columnRange.setHorizontalAlignment("left");
    } else {
      columnRange.setHorizontalAlignment("center");
    }

    // Word wrap for column 19
    if (col === 19) {
      columnRange.setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP);
    }

    // Set number formats
    if ([6, 12, 13].includes(col)) {
      columnRange.setNumberFormat("0.0000"); // Number with 4 decimal places
    }
    if (col === 8) {
      columnRange.setNumberFormat("0"); // Number with no decimals
    }
    if ([7, 11].includes(col)) {
      columnRange.setNumberFormat("0.00%"); // Percent with 2 decimal places
    }
    if (col === 14) {
      columnRange.setNumberFormat("0.000%"); // Percent with 4 decimal places
    }
  }
}

// Sort all rows by values in column
function sortByColumn(sheet, number)
{
  const numRows = sheet.getLastRow();
  sheet.getRange(2, 1, numRows - 1, 19).sort({ column: number, ascending: true });
}

function calculateOpportunityIndex(chainId) {
  const scores = CHAIN_SCORES[chainId];
  if (!scores) return 0;
  return scores.airdrop + scores.devActivity + scores.costEfficiency;
}

function fetchJsonWithRetries(url, maxRetries, delayMs) {
  //Logger.log("Starting to retry fetch on URL " + url);
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = UrlFetchApp.fetch(url, { muteHttpExceptions: true });
      const code = response.getResponseCode();
      
      // If not 200, log and retry
      if (code !== 200) {
        throw new Error(`HTTP ${code} on attempt ${attempt}`);
      }
      
      const json = JSON.parse(response.getContentText());
      
      // Check if it's a "No quote" style response
      if (json.message && json.message.toLowerCase().includes("no quote")) {
        throw new Error(`LiFi API says: ${json.message}`);
      }
      
      return json; // ✅ Successful fetch
    } catch (err) {
      Logger.log(`Attempt ${attempt}: ${err.message}`);
      if (attempt === maxRetries) {
        throw new Error(`Failed after ${maxRetries} attempts: ${err.message}`);
      }
      Utilities.sleep(delayMs); // Wait before retrying
    }
  }
}

async function analyzeWithOpenAI(sheet) {
  const data = sheet.getDataRange().getValues();
  const headers = data[0];
  const rows = data.slice(1).filter(row => row.join('').trim() !== '');

  // Build a markdown-style table
  let markdown = `Here's a table of bridging quotes:\n\n`;
  markdown += `| ${headers.join(' | ')} |\n`;
  markdown += `| ${headers.map(() => '---').join(' | ')} |\n`;

  rows.forEach(row => {
    const sanitizedRow = row.map(cell => String(cell).replace(/\|/g, '\\|')); // Escape |
    markdown += `| ${sanitizedRow.join(' | ')} |\n`;
  });

  const prompt = `
    ${markdown}
    You're an expert AI advisor that has the whole world's crypto market data in your hands. You help choose the best crypto bridge routes available for given pairs.
    You are analyzing bridging routes from the following table. 
    Based on the data you have, choose the top 3 best routes. Prioritize routes with lowest total cost (sum of Fee USD and Slippage USD) and evaluation of benefits of using these chains in terms of rumored future airdrops (if there are rumors about it — don't make it up. Make fact checking before decide).
    Output the result as a JSON array of 3 objects, each with:
    - "routeID": (the Route ID number from the table),
    - "routeEstimationValue": (a number between 0 and 100 estimating its overall value, usability, benefits of using this chain because of rumors of future airdrops),
    - "routeSummary": (a brief user-friendly summary (under 4 sentences) — of why this route is good).
    Only return the JSON array. Do not include any other text.
    `;

  const response = UrlFetchApp.fetch("https://api.openai.com/v1/chat/completions", {
  method: "post",
  contentType: "application/json",
  headers: {
    Authorization: `Bearer ${OPENAI_API_KEY}`
  },
  payload: JSON.stringify({
    model: "gpt-4-turbo",
    messages: [
      { role: "system", content: "You are an expert at analyzing crypto bridge routes." },
      { role: "user", content: prompt }
    ],
    temperature: 0.2
  })
  });

  //Logger.log("OpenAI HTTP Response Code: " + response.getResponseCode());
  const responseText = response.getContentText();
  //Logger.log("OpenAI Raw Text Response: " + responseText);

  let analysis;
  try {
    const parsed = JSON.parse(responseText);
    const content = parsed.choices[0].message.content;
    //Logger.log("Raw content from ChatGPT:\n" + content);
    analysis = JSON.parse(content); // This is the actual array of routes
  } catch (e) {
    Logger.log("Failed to parse response JSON or content: " + e);
    return;
  }

  // Now extract IDs, scores, and summaries
  const IDs = analysis.map(route => route.routeID);
  const scores = analysis.map(route => route.routeEstimationValue);
  const summaries = analysis.map(route => route.routeSummary);

  highlightTopRoutes(sheet, IDs);
  writeChatGPTScores(sheet, IDs, scores);
  writeChatGPTSummaries(sheet, IDs, summaries);
}

function highlightTopRoutes(sheet, IDs) {
  Logger.log("Highlighting function starts");

  const data = sheet.getDataRange().getValues();
  const idIndex = data[0].indexOf("Route ID");

  if (idIndex === -1) {
    Logger.log("Could not find 'Route ID' column.");
    return;
  }

  for (let i = 1; i < data.length; i++) {
    const routeID = String(data[i][idIndex]).trim();
    const match = IDs.map(String).map(id => id.trim()).includes(routeID);
    
    if (match) {
      const range = sheet.getRange(i + 1, 1, 1, sheet.getLastColumn());
      range.setBackground("#e3f2fd");
    }
  }
  Logger.log("Highlighting function ends");
}

function writeChatGPTScores(sheet, IDs, scores) {
  Logger.log("writeChatGPTScores function starts");
  const data = sheet.getDataRange().getValues();
  const idIndex = data[0].indexOf("Route ID");

  if (idIndex === -1) {
    Logger.log("Could not find 'Route ID' column.");
    return;
  }

  for (let i = 1; i < data.length; i++) {
    const routeID = String(data[i][idIndex]).trim(); // Convert to string and remove extra spaces
    const matchIndex = IDs.map(String).map(id => id.trim()).indexOf(routeID);
    
    if (matchIndex !== -1) {
      sheet.getRange(i + 1, 18).setValue(scores[matchIndex]);
    }

  }
  Logger.log("writeChatGPTScores function ends");
}


function writeChatGPTSummaries(sheet, IDs, summaries) {
  Logger.log("writeChatGPTSummaries function starts");
  const data = sheet.getDataRange().getValues();
  const idIndex = data[0].indexOf("Route ID");

  for (let i = 1; i < data.length; i++) {
    const routeID = data[i][idIndex];
    const matchIndex = IDs.indexOf(routeID);
    if (matchIndex !== -1) {
      sheet.getRange(i + 1, 19).setValue(summaries[matchIndex]);
    }
  }
  Logger.log("writeChatGPTSummaries function ends");
}